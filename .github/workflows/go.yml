name: "tagged-release"

on:
  push:
    branches:
      - "master"
      - "release"
    tags: 
      - "v*"

jobs:
  build:
    name: "build"
    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        include:
          - goarch: amd64
            goos: linux
          - goarch: amd64
            goos: darwin
          - goarch: amd64
            goos: windows
          - goarch: arm64
            goos: linux
          - goarch: arm64
            goos: darwin
          - goarch: arm64
            goos: windows
    
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      
      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: go build -v ./...
      
      - name: GetVersion
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
        
      - name: Packaging...
        run: |
          find *|grep git_action_golang_test|xargs zip git_action_golang_test-${{ matrix.goos }}-${{ matrix.goarch }}-${{ env.RELEASE_VERSION }}.zip 
      
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          # Artifact name
          # name is only a identifier that means when you download use name the file name you download is actually the `path`
          # so we use a simple file name
          # TODO:this is not a elegent implement due to that we can't use wildcard when download: see https://github.com/actions/download-artifact/issues/6
          name: ${{ matrix.goos }}-${{ matrix.goarch }}.zip
#           name: git_action_golang_test-${{ matrix.goos }}-${{ matrix.goarch }}-${{ env.RELEASE_VERSION }}.zip # optional, default is artifact
          # A file, directory or wildcard pattern that describes what to upload
          path: git_action_golang_test-${{ matrix.goos }}-${{ matrix.goarch }}-${{ env.RELEASE_VERSION }}.zip
        
        
  release: 
    name: "release"
    runs-on: "ubuntu-latest"
    needs: build
    steps:
      - name: GetVersion
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
        
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3.0.0
        with:
          # Artifact name
          name: linux-amd64.zip

      - name: Download a Build Artifact
        uses: actions/download-artifact@v3.0.0
        with:
          # Artifact name
          name: darwin-amd64.zip
      
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3.0.0
        with:
          # Artifact name
          name: windows-amd64.zip
        
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3.0.0
        with:
          # Artifact name
          name: linux-arm64.zip
          
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3.0.0
        with:
          # Artifact name
          name: darwin-arm64.zip
          
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3.0.0
        with:
          # Artifact name
          name: windows-arm64.zip
        
      - name: Print
        run: echo ${{ github.branches }}
          
      
      - name: Release
        if: ${{ github.branches == 'master' }}
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          prerelease: false
          files: |
            git_action_golang_test-*-${{ env.RELEASE_VERSION }}.zip


      - name: Pre-Release
        if: ${{ github.branches == 'release' }}
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          prerelease: true
          files: |
            git_action_golang_test-*-${{ env.RELEASE_VERSION }}.zip
        


